{"version":3,"sources":["common/hooks/useSequence.js","common/hooks/useKeys.js","common/hooks/useFormState.js","main/validate.js","main/components/LabelError.js","main/components/Input.js","main/components/InputArray.js","main/index.js","main/components/Form.js","App.js","serviceWorker.js","index.js"],"names":["useSequence","initialNext","nextRef","useRef","current","useKeys","initial","getKey","_useState","useState","Array","fill","map","x","i","_useState2","Object","slicedToArray","keys","setKeys","concat","key","newKeys","slice","index","indexOf","splice","initializeForm","initialValues","type","payload","changeValueForm","path","value","changeMetadata","name","INITIAL_STATE","formValues","errors","metas","reducer","state","_ref","assignedValue","newItems","set","objectSpread","get","filter","element","useField","customValidation","dispatch","getValueByPath","getError","getMetadata","meta","validate","is","empty","error","assignErrorForm","bind","onChange","e","onlyValue","arguments","length","undefined","target","onBlur","onFocus","isFocus","isTouched","changeValue","useFormState","handleSuccess","_useReducer","useReducer","_useReducer2","_useField3","getField","_useFieldArray","_useField","_useKeys","_useKeys2","add","remove","inputArray","removeItem","useFieldArray","getFieldArray","useEffect","values","initialize","reset","resetForm","onSubmit","preventDefault","clubName","membersArrayErrors","members","member","memberIndex","memberErrors","phone","LabelError","react_default","a","createElement","style","fontSize","color","Input","placeholder","assign","components_LabelError","InputArray","styles","onClick","components_Input","main","Form","_useFormState","console","log","components_InputArray","backgroundColor","JSON","stringify","App","className","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yRAWeA,EALK,SAACC,GACjB,IAAIC,EAAUC,iBAAOF,GACrB,OAAO,kBAAMC,EAAQE,YCcVC,EAfC,SAACC,GACb,IAAIC,EAASP,EAAYM,EAAU,GADVE,EAEHC,mBAASC,MAAMJ,GAASK,KAAK,GAAGC,IAAI,SAACC,EAAGC,GAAJ,OAAUA,EAAI,KAF/CC,EAAAC,OAAAC,EAAA,EAAAD,CAAAR,EAAA,GAEpBU,EAFoBH,EAAA,GAEdI,EAFcJ,EAAA,GAYzB,MAAO,CAACG,EATE,kBAAMC,EAAQD,EAAKE,OAAOb,OACvB,SAACc,GACV,IAAIC,EAAUJ,EAAKK,MAAM,GACrBC,EAAQF,EAAQG,QAAQJ,IACb,IAAXG,GACAF,EAAQI,OAAOF,EAAO,GAE1BL,EAAQG,sDCOVK,EAAiB,SAACC,GACpB,MAAO,CACHC,KAbW,aAcXC,QAASF,IAaXG,EAAkB,SAACC,EAAMC,GAC3B,MAAO,CACHJ,KAhCa,eAiCbC,QAAS,CACLE,OACAC,WAiBNC,EAAiB,SAACF,EAAMG,EAAMF,GAChC,MAAO,CACHJ,KArDgB,kBAsDhBC,QAAS,CACLE,OACAG,OACAF,WAsBNG,EAAgB,CAClBC,WAAY,GACZC,OAAQ,GACRC,MAAO,IAGLC,EAAU,SAACC,EAADC,GAA8B,IAApBb,EAAoBa,EAApBb,KAAMC,EAAcY,EAAdZ,QAExBa,EAAgB,KAChBC,EAAW,GAEf,OAAQf,GACJ,IAzFW,aA2FP,OADAc,EAAgBE,IAAIJ,EAAD,aAAsBX,GAClCd,OAAA8B,EAAA,EAAA9B,CAAA,GAAKyB,EAAUE,GAE1B,IAhGa,eAkGT,OADAA,EAAgBE,IAAIJ,EAAD,cAAArB,OAAsBU,EAAQE,MAAQF,EAAQG,OAC1DjB,OAAA8B,EAAA,EAAA9B,CAAA,GAAKyB,EAAUE,GAE1B,IAnGgB,kBAqGZ,OADAA,EAAgBE,IAAIJ,EAAD,SAAArB,OAAiBU,EAAQE,KAAzB,KAAAZ,OAAiCU,EAAQK,MAAQL,EAAQG,OACrEjB,OAAA8B,EAAA,EAAA9B,CAAA,GAAKyB,EAAUE,GAE1B,IAtGW,aAuGP,OAAO3B,OAAA8B,EAAA,EAAA9B,CAAA,GAAKyB,EAAU,CAAEJ,WAAYP,EAASQ,OAAQ,GAAIC,MAAO,KAEpE,IAvGa,eAyGT,OADAI,EAAgBE,IAAIJ,EAAD,UAAArB,OAAkBU,EAAQE,MAAQF,EAAQG,OACtDjB,OAAA8B,EAAA,EAAA9B,CAAA,GAAKyB,EAAUE,GAE1B,IA1GY,cA6GR,OAFAC,EAAWG,IAAIN,EAAD,cAAArB,OAAsBU,EAAQE,MAAQ,IAAIgB,OAAO,SAACC,EAASzB,GAAV,OAAoBA,IAAUM,EAAQN,QACrGmB,EAAgBE,IAAIJ,EAAD,cAAArB,OAAsBU,EAAQE,MAAQY,GAClD5B,OAAA8B,EAAA,EAAA9B,CAAA,GAAKyB,EAAUE,GAE1B,QACI,OAAOF,IAmBbS,EAAW,SAACC,EAAkBV,EAAOW,GAEvC,IAAMC,EAAiB,SAACrB,GACpB,OAAOe,IAAIN,EAAD,cAAArB,OAAsBY,GAAQ,KAGtCsB,EAAW,SAACtB,GACd,IAAMM,EAASa,EAAiBV,EAAMJ,YACtC,OAAOU,IAAIT,EAAD,GAAAlB,OAAYY,GAAQ,OAG5BuB,EAAc,SAACvB,EAAMwB,GACvB,OAAOT,IAAIN,EAAMF,MAAP,GAAAnB,OAAiBY,EAAjB,KAAAZ,OAAyBoC,IAAQ,IAgD/C,MAAO,CA7CU,SAACxB,GAEd,IAAMyB,EAAW,WAEb,GADAL,EAASlB,EAAeF,EAAM,aAAa,KACtC0B,IAAGC,MAAMR,GAAmB,CAC7B,IAAMS,EAAQN,EAAStB,GACvB,IAAK0B,IAAGC,MAAMC,GAEV,OADAR,EArHI,SAACpB,EAAMC,GAC3B,MAAO,CACHJ,KAvCa,eAwCbC,QAAS,CACLE,OACAC,UAgHiB4B,CAAgB7B,EAAM4B,KACxB,EAIf,OAAO,GAGX,MAAO,CACHE,KAAM,CACF7B,MAAOoB,EAAerB,GACtB+B,SAAU,SAACC,GAAyB,IAAtBC,EAAsBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAChCT,IAGIL,EAASrB,EAAgBC,EAD1BiC,EACgCD,EAGJA,EAAEK,OAAOpC,SAE5CqC,OAAQ,WACJb,IACAL,EAASlB,EAAeF,EAAM,WAAW,KAE7CuC,QAAS,WACLnB,EAASlB,EAAeF,EAAM,WAAW,MAGjD4B,MAAON,EAAStB,GAChBwC,QAASjB,EAAYvB,EAAM,WAC3ByC,UAAWlB,EAAYvB,EAAM,aAC7ByB,WACAiB,YAAa,SAACzC,GACVmB,EAASrB,EAAgBC,EAAMC,OAKzBoB,IAmGPsB,EA9CM,SAAC/C,EAAeuB,EAAkByB,GAAkB,IAAAC,EAE3CC,qBAAWtC,EAASJ,GAFuB2C,EAAA/D,OAAAC,EAAA,EAAAD,CAAA6D,EAAA,GAE9DpC,EAF8DsC,EAAA,GAEvD3B,EAFuD2B,EAAA,GAAAC,EAGlD9B,EAASC,EAAkBV,EAAOW,GAA9C6B,EAH8DjE,OAAAC,EAAA,EAAAD,CAAAgE,EAAA,MAAAE,EAxCnD,SAAC/B,EAAkBV,EAAOW,GAAa,IAAA+B,EAEtCjC,EAASC,EAAkBV,EAAOW,GAA9C6B,EAFkDjE,OAAAC,EAAA,EAAAD,CAAAmE,EAAA,MAAAC,EAG7B/E,EAAQ,GAHqBgF,EAAArE,OAAAC,EAAA,EAAAD,CAAAoE,EAAA,GAGlDlE,EAHkDmE,EAAA,GAG5CC,EAH4CD,EAAA,GAGvCE,EAHuCF,EAAA,GAmBzD,MAAO,CAde,SAACrD,GAEnB,IAAMwD,EAAaP,EAASjD,GAS5B,OAPAwD,EAAWtE,KAAOA,EAClBsE,EAAWF,IAAMA,EACjBE,EAAWD,OAAS,SAACvD,EAAMR,EAAOH,GAC9B+B,EA7JO,SAACpB,EAAMR,GACtB,MAAO,CACHK,KA7DY,cA8DZC,QAAS,CACLE,OACAR,UAwJSiE,CAAWzD,EAAMR,IAC1B+D,EAAOlE,IAGJL,OAAA8B,EAAA,EAAA9B,CAAA,GAAKwE,KA4BQE,CAAcvC,EAAkBV,EAAOW,GAAxDuC,EAJ8D3E,OAAAC,EAAA,EAAAD,CAAAkE,EAAA,MAW/DzB,EAAW,aAyBjB,OAJAmC,oBAAU,YAlBS,WAAmB,IAAlBC,EAAkB3B,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAT,KAEdd,EAASzB,EADhBkE,GAI2BjE,IAc/BkE,IACD,IAEI,CACHrD,QACAsD,MAhBU,WACV3C,EA1PU,SAACxB,GACf,MAAO,CACHC,KAtBW,aAuBXC,QAASF,GAuPAoE,CAAUpE,KAgBnBqD,WACAU,gBACAM,SAfa,SAACjC,GACdA,EAAEkC,iBAEFtB,EAAcnC,EAAMJ,aAapBoB,aC5QOA,EA/BE,WAAiB,IAAhBoC,EAAgB3B,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,GACjB5B,EAAS,GAGXoB,IAAGC,MAAMkC,EAAOM,YAChB7D,EAAO6D,SAAW,wBAGtB,IAAMC,EAAqB,GAoB3B,OAnBAP,EAAOQ,SAAWR,EAAOQ,QAAQzF,IAAI,SAAC0F,EAAQC,GAC1C,IAAIC,EAAe,GAEdF,EAAOnE,OACRqE,EAAarE,KAAO,uBACpBiE,EAAmBG,GAAeC,GAGjCF,EAAOG,QACRD,EAAaC,MAAQ,wBACrBL,EAAmBG,GAAeC,KAKtCJ,EAAmBjC,SACrB7B,EAAO+D,QAAUD,GAGZ9D,GCxBIoE,EAJW,SAAAhE,GAAa,IAAXkB,EAAWlB,EAAXkB,MACxB,OAAO+C,EAAAC,EAAAC,cAAA,SAAOC,MAAO,CAACC,SAAU,GAAIC,MAAM,QAASpD,ICSxCqD,EATD,SAAAvE,GAA2C,IAAzCoB,EAAyCpB,EAAzCoB,KAAMW,EAAmC/B,EAAnC+B,UAAWb,EAAwBlB,EAAxBkB,MAAOsD,EAAiBxE,EAAjBwE,YACpC,OAAOP,EAAAC,EAAAC,cAAA,WACHF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAA7F,OAAAmG,OAAA,GAAWrD,EAAX,CAAiBoD,YAAaA,MAElCP,EAAAC,EAAAC,cAACO,EAAD,CAAYxD,MAAQA,GAASa,GAAab,MCgBnCyD,EArBI,SAAA3E,GAAqC,IAAlCxB,EAAkCwB,EAAlCxB,KAAM+D,EAA4BvC,EAA5BuC,SAAUM,EAAkB7C,EAAlB6C,OAAQD,EAAU5C,EAAV4C,IAE1C,OACIqB,EAAAC,EAAAC,cAAA,WAEQ3F,EAAKN,IAAI,SAACS,EAAKG,GACX,OACImF,EAAAC,EAAAC,cAAA,OAAKxF,IAAKA,GACNsF,EAAAC,EAAAC,cAAA,SAAOS,OAAQ,CAACP,SAAU,KAA1B,WAAwCvF,EAAQ,GADpD,IAC+DmF,EAAAC,EAAAC,cAAA,WAC3DF,EAAAC,EAAAC,cAAA,UAAQhF,KAAK,SAAS0F,QAAS,kBAAMhC,EAAM,UAAY/D,EAAOH,KAA9D,YACAsF,EAAAC,EAAAC,cAACW,EAADxG,OAAAmG,OAAA,CAAOD,YAAa,QAAYjC,EAAQ,WAAA7D,OAAYI,EAAZ,aACxCmF,EAAAC,EAAAC,cAACW,EAADxG,OAAAmG,OAAA,CAAOD,YAAa,SAAajC,EAAQ,WAAA7D,OAAYI,EAAZ,iBAKzDmF,EAAAC,EAAAC,cAAA,UAAQhF,KAAK,SAAS0F,QAASjC,GAA/B,kBCjBGmC,EAAA,CACXC,KCGS,WACX,IADiBC,EAUoChD,EAT/B,CACpBwB,SAAU,GACVE,QAAS,IAST5C,EANoB,SAACoC,GACrB+B,QAAQC,IAAI,gBAAiBhC,KAGvBpD,EAVSkF,EAUTlF,MAAOwC,EAVE0C,EAUF1C,SAAUU,EAVRgC,EAUQhC,cAAeM,EAVvB0B,EAUuB1B,SAMlCE,EAAWlB,EAAS,YACpBoB,EAAUV,EAAc,WAE9B,OACEgB,EAAAC,EAAAC,cAAA,QAAMZ,SAAUA,GACdU,EAAAC,EAAAC,cAACW,EAADxG,OAAAmG,OAAA,CAAOD,YAAa,aAAiBf,IACrCQ,EAAAC,EAAAC,cAACiB,EAAD9G,OAAAmG,OAAA,CAAYlC,SAAUA,GAAcoB,IACpCM,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,yBAEFF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEiB,gBAAiB,OAAQhB,SAAU,KAC/CJ,EAAAC,EAAAC,cAAA,WAAMmB,KAAKC,UAAUxF,EAAMJ,WAAY,KAAM,SCjBxC6F,mLAXX,OACEvB,EAAAC,EAAAC,cAAA,OAAKsB,UAAU,OACbxB,EAAAC,EAAAC,cAAA,gDACAF,EAAAC,EAAAC,cAAA,UAAQsB,UAAU,cACfxB,EAAAC,EAAAC,cAACY,EAAKC,KAAN,eAPOU,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.534bbffb.chunk.js","sourcesContent":["import {useRef} from 'react';\n\n/** \n * Hook para generar una secuencia \n * @param {*} initialNext Valor inicial siguiente.\n * */\nconst useSequence = (initialNext) => {\n    let nextRef = useRef(initialNext);\n    return () => nextRef.current++;\n}\n\nexport default useSequence;","import {useState} from 'react';\nimport useSequence from './useSequence';\n\n/**\n * Hook para generar arreglos.\n * @param {*} initial Valor inicial\n */\nconst useKeys = (initial) => {\n    let getKey = useSequence(initial + 1)\n    let [keys, setKeys] = useState(Array(initial).fill(0).map((x, i) => i + 1))\n    let add = () => setKeys(keys.concat(getKey()))\n    let remove = (key) => {\n        let newKeys = keys.slice(0)\n        let index = newKeys.indexOf(key)\n        if (index !== -1) {\n            newKeys.splice(index, 1)\n        }\n        setKeys(newKeys)\n    }\n    return [keys, add, remove];\n}\n\nexport default useKeys;","import { useReducer, useEffect } from 'react';\nimport useKeys from './useKeys';\nimport set from 'lodash/set';\nimport get from 'lodash/get';\nimport is from 'is_js';\n\n/**\n * ACTION_TYPES\n */\n\nconst CHANGE_VALUE = 'CHANGE_VALUE';\nconst CHANGE_METADATA = 'CHANGE_METADATA';\nconst RESET_FORM = 'RESET_FORM';\nconst INITIALIZE = 'INITIALIZE';\nconst ASSIGN_ERROR = 'ASSIGN_ERROR';\nconst REMOVE_ITEM = 'REMOVE_ITEM';\n\n//////////////////////\n\n/**\n * ACTIONS\n */\n\n/** Inicializa el formulario. */\nconst initializeForm = (initialValues) => {\n    return {\n        type: INITIALIZE,\n        payload: initialValues\n    }\n}\n\n/** Reinicia el formulario. */\nconst resetForm = (initialValues) => {\n    return {\n        type: RESET_FORM,\n        payload: initialValues\n    }\n}\n\n/** Cambia el valor del elemento. */\nconst changeValueForm = (path, value) => {\n    return {\n        type: CHANGE_VALUE,\n        payload: {\n            path,\n            value\n        }\n    }\n}\n\n/** Asigna errores al elemento. */\nconst assignErrorForm = (path, value) => {\n    return {\n        type: ASSIGN_ERROR,\n        payload: {\n            path,\n            value\n        }\n    }\n}\n\n/** Cambia los valores de los metadatos. */\nconst changeMetadata = (path, name, value) => {\n    return {\n        type: CHANGE_METADATA,\n        payload: {\n            path,\n            name,\n            value\n        }\n    }\n}\n\n/** Elimina un elemento del arreglo. */\nconst removeItem = (path, index) => {\n    return {\n        type: REMOVE_ITEM,\n        payload: {\n            path,\n            index\n        }\n    };\n}\n\n///////////////////////////////////\n\n/**\n * REDUCER\n */\n\nconst INITIAL_STATE = {\n    formValues: {},\n    errors: {},\n    metas: {}\n};\n\nconst reducer = (state, { type, payload }) => {\n\n    let assignedValue = null;\n    let newItems = [];\n\n    switch (type) {\n        case INITIALIZE:\n            assignedValue = set(state, `formValues`, payload);\n            return { ...state, ...assignedValue };\n\n        case CHANGE_VALUE:\n            assignedValue = set(state, `formValues.${payload.path}`, payload.value);\n            return { ...state, ...assignedValue };\n\n        case CHANGE_METADATA:\n            assignedValue = set(state, `metas.${payload.path}.${payload.name}`, payload.value);\n            return { ...state, ...assignedValue };\n\n        case RESET_FORM:\n            return { ...state, ...{ formValues: payload, errors: {}, metas: {} } };\n\n        case ASSIGN_ERROR:\n            assignedValue = set(state, `errors.${payload.path}`, payload.value);\n            return { ...state, ...assignedValue };\n\n        case REMOVE_ITEM:\n            newItems = get(state, `formValues.${payload.path}`, []).filter((element, index) => index !== payload.index);\n            assignedValue = set(state, `formValues.${payload.path}`, newItems);\n            return { ...state, ...assignedValue };\n\n        default:\n            return state;\n    }\n}\n\n/**\n * HOOKS\n */\n\n/**\n * Hook para usar para los fields.\n * @param {*} customValidation Validación del usuario.\n * @param {*} state State del formulario.\n * @param {*} dispatch Evento que disparará las acciones.\n * \n * return\n * \n * getField // Obtener propiedades del field.\n * getValueByPath // Obtener el valor en especifico.\n */\nconst useField = (customValidation, state, dispatch) => {\n\n    const getValueByPath = (path) => {\n        return get(state, `formValues.${path}`, '');\n    }\n\n    const getError = (path) => {\n        const errors = customValidation(state.formValues);\n        return get(errors, `${path}`, null);\n    }\n\n    const getMetadata = (path, meta) => {\n        return get(state.metas, `${path}.${meta}`, false);\n    }\n\n    const getField = (path) => {\n\n        const validate = () => {\n            dispatch(changeMetadata(path, 'isTouched', true));\n            if (!is.empty(customValidation)) {\n                const error = getError(path);\n                if (!is.empty(error)) {\n                    dispatch(assignErrorForm(path, error));\n                    return false;\n                }\n            }\n\n            return true;\n        }\n\n        return {\n            bind: {\n                value: getValueByPath(path),\n                onChange: (e, onlyValue = false) => {\n                    validate();\n\n                    if(onlyValue){\n                        dispatch(changeValueForm(path, e));\n                        return;\n                    }\n                    dispatch(changeValueForm(path, e.target.value));\n                },\n                onBlur: () => {\n                    validate();\n                    dispatch(changeMetadata(path, 'isFocus', false));\n                },\n                onFocus: () => {\n                    dispatch(changeMetadata(path, 'isFocus', true));\n                }\n            },\n            error: getError(path),\n            isFocus: getMetadata(path, 'isFocus'),\n            isTouched: getMetadata(path, 'isTouched'),\n            validate,\n            changeValue: (value) => {\n                dispatch(changeValueForm(path, value));\n            }\n        }\n    };\n\n    return [getField, getValueByPath];\n}\n\n/**\n * Hook para usar en caso que el field sea un arreglo.\n * @param {*} customValidation Validación del usuario.\n * @param {*} state State del formulario.\n * @param {*} dispatch Evento que disparará las acciones.\n * \n * return\n * \n * getFieldArray // Obtener propiedades del fieldArray\n */\nconst useFieldArray = (customValidation, state, dispatch) => {\n\n    const [getField] = useField(customValidation, state, dispatch);\n    const [keys, add, remove] = useKeys(0);\n\n    const getFieldArray = (path) => {\n\n        const inputArray = getField(path);\n\n        inputArray.keys = keys;\n        inputArray.add = add;\n        inputArray.remove = (path, index, key) => {\n            dispatch(removeItem(path, index));\n            remove(key);\n        }\n\n        return { ...inputArray };\n    };\n\n    return [getFieldArray];\n}\n\n/**\n * Hook para usar el state completo para la manipulación del formulario.\n * @param initialValues  Valores iniciales.\n * @param customValidation Validación del usuario.\n * @param handleSuccess Evento a ejecutar en caso de exito.\n * \n * return\n * ```\n * {\n *  state, // State del formulario.\n *  reset, // Reinicio del formulario.\n *  getField, // Obtener propiedades el field.\n *  getFieldArray, // Obtener propiedades del field array.\n *  onSubmit, // Evento en caso de exito.\n *  validate // Validación del formulario.\n * }\n * ```\n */\nconst useFormState = (initialValues, customValidation, handleSuccess) => {\n\n    const [state, dispatch] = useReducer(reducer, INITIAL_STATE);\n    const [getField] = useField(customValidation, state, dispatch);\n    const [getFieldArray] = useFieldArray(customValidation, state, dispatch);\n\n    /**\n     *  TODO: Implement a best way to manage global validation.\n     *   let input = getField('paternalSurname');\n     *   console.log('input.validate', input.validate());\n     */\n    const validate = () => {}\n\n\n    const initialize = (values = null) => {\n        if (values) {\n            return dispatch(initializeForm(values));\n        }\n\n        return dispatch(initializeForm(initialValues));\n    }\n\n    const reset = () => {\n        dispatch(resetForm(initialValues));\n    }\n\n    const onSubmit = (e) => {\n        e.preventDefault();\n        validate();\n        handleSuccess(state.formValues);\n    }\n\n    useEffect(() => {\n        initialize();\n    }, []);\n\n    return {\n        state,\n        reset,\n        getField,\n        getFieldArray,\n        onSubmit,\n        validate\n    };\n}\n\nexport default useFormState;","import is from 'is_js';\n\nconst validate = (values = {}) => {\n    const errors = {\n    };\n\n    if (is.empty(values.clubName)) {\n        errors.clubName = 'The club is required';\n    }\n\n    const membersArrayErrors = [];\n    values.members && values.members.map((member, memberIndex) => {\n        let memberErrors = {};\n\n        if (!member.name) {\n            memberErrors.name = 'The name is required';\n            membersArrayErrors[memberIndex] = memberErrors;\n        }\n\n        if (!member.phone) {\n            memberErrors.phone = 'The phone is required';\n            membersArrayErrors[memberIndex] = memberErrors;\n        }\n\n    });\n\n    if (membersArrayErrors.length) {\n      errors.members = membersArrayErrors;\n    }\n\n    return errors;\n};\n\nexport default validate;","import React from 'react';\n\nexport const LabelError = ({error}) => {\n    return <small style={{fontSize: 11, color:'red'}}>{error}</small>\n}\n\nexport default LabelError;","import React from 'react';\nimport LabelError from './LabelError';\n\nconst Input = ({bind, isTouched, error, placeholder}) => {\n    return <div>\n        <div>\n            <input {...bind} placeholder={placeholder}/>\n        </div>\n        <LabelError error={ error && isTouched && error} /> \n    </div>\n}\n\nexport default Input;","import React from 'react';\nimport Input from './Input';\n\nconst InputArray = ({ keys, getField, remove, add }) => {\n\n    return (\n        <div>\n            {\n                keys.map((key, index) => {\n                    return (\n                        <div key={key}>\n                            <small styles={{fontSize: 13}}>Member #{index + 1}</small> <br/>\n                            <button type=\"button\" onClick={() => remove(`members`, index, key)}> REMOVE </button> \n                            <Input placeholder={'Name'} {...getField(`members[${index}].name`)} />\n                            <Input placeholder={'Phone'} {...getField(`members[${index}].phone`)} />\n                        </div>\n                    )\n                })\n            }\n            <button type=\"button\" onClick={add}> ADD MEMBER </button>\n        </div>\n    );\n}\n\nexport default InputArray;\n","import { Form } from './components';\n\nexport default {\n    Form\n};","import React from \"react\";\nimport { useFormState } from \"../../common/hooks\";\nimport validate from \"../validate\";\nimport Input from \"./Input\";\nimport InputArray from \"./InputArray\";\n\nconst Form = () => {\n  const initialValues = {\n    clubName: \"\",\n    members: [],\n  };\n\n  const handleSuccess = (values) => {\n    console.log(\"handleSuccess\", values);\n  };\n\n  const { state, getField, getFieldArray, onSubmit } = useFormState(\n    initialValues,\n    validate,\n    handleSuccess\n  );\n\n  const clubName = getField(\"clubName\");\n  const members = getFieldArray(\"members\");\n\n  return (\n    <form onSubmit={onSubmit}>\n      <Input placeholder={\"Club name\"} {...clubName} />\n      <InputArray getField={getField} {...members} />\n      <div>\n        <button> SAVE </button>\n      </div>\n      <div>\n        <small>Results</small>\n        <div style={{ backgroundColor: \"#DDD\", fontSize: 14 }}>\n          <pre>{JSON.stringify(state.formValues, null, 2)}</pre>\n        </div>\n      </div>\n    </form>\n  );\n};\n\nexport default Form;\n","import React, { Component } from 'react';\nimport './App.css';\nimport main from './main';\n\nclass App extends Component {\n  render() {\n\n    return (\n      <div className=\"App\">\n        <h1> Form with hook \"useStatefulForm\" </h1>\n        <header className=\"App-header\">\n           <main.Form />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}